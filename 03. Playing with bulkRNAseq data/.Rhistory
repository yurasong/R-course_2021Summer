library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(ggrepel)
library(ggfortify)
count <- read.delim("data/rawcount.csv", h=T, sep=",")
setwd("Without batch effect/")
getwd()
getwd()
count <- read.delim("data/rawcount.csv", h=T, sep=",")
count <- read.delim("Without batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
# Count matrix
countData <- count[,2:ncol(count)]
rownames(countData) <- count[,1]
colData <- data.frame(condition=c("Control", "Control", "Exp", "Exp"),
precise=c("CTRL1", "CTRL2", "Exp1", "Exp2"))
rownames(colData) <- colnames(countData)
colData
dds <- DESeqDataSetFromMatrix(countData, colData, design = ~ condition)
keep <- rowSums(counts(dds)) > 20
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
boxplot(log2(1 + counts(dds, normalized = FALSE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="Before normalization")
boxplot(log2(1 + counts(dds, normalized = TRUE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="After normalization")
rld <- rlog(dds)
rld <- rlog(dds)
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transformation-Control")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,3:4], pch=16, cex=0.5, main = "No transformation-Exp")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-Control", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,3:4], pch=16, cex=0.5, main="Reg-log-Exp", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
sampleDists <- dist( t( assay(rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors,
annotation_col =colData)
plot(sampleDistMatrix)
hs <- hclust(dist(t(assay(rld))))
plot(hs)
# calculate correlation between pairs of samples for all possible pairs.
sampleCor <- cor(assay(rld))
# generate heatmap
pheatmap(
as.matrix(sampleCor),
annotation_col =as.data.frame(colData(rld)[,c(1,2)]),
main = "Correlation clustering",
width = 12,
height = 10
)
count <- read.delim("With batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
count <- read.delim("With batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
count <- read.delim("With batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
countData <- count[,2:ncol(count)]
rownames(countData) <- count[,1]
colData <- data.frame(condition=c(rep("D13A" , 3), rep("D13B", 3), rep("AdultA", 2), rep("AdultB", 2)),
precise=c("D13_A1", "D13_A2","D13_A3","D13_B1", "D13_B2","D13_B3","Adult_D1", "Adult_D2","Adult_B1","Adult_B2"),
batch=c("1", "1", "2", "1", "1", "2", rep("1", 4)))
rownames(colData) <- colnames(countData)
head(colData)
dds <- DESeqDataSetFromMatrix(countData, colData, design = ~batch + condition)
keep <- rowSums(counts(dds)) > 20
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
boxplot(log2(1 + counts(dds, normalized = FALSE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="Before normalization")
boxplot(log2(1 + counts(dds, normalized = TRUE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="After normalization")
rld <- rlog(dds)
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transf-D13A1 vs D13A2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,1:3], pch=16, cex=0.5, main = "No transf-D13A1 vs D13A3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,2:3], pch=16, cex=0.5, main = "No transf-D13A2 vs D13A3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-D13A1 vs D13A2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:3], pch=16, cex=0.5, main = "Reg-log-D13A1 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,2:3], pch=16, cex=0.5, main = "Reg-log-D13A2 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,4:5], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,4:6], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,5:6], pch=16, cex=0.5, main = "No transf-D13B2 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:5], pch=16, cex=0.5, main="Reg-log-D13B1 vs D13B2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:6], pch=16, cex=0.5, main = "Reg-log-D13B1 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,5:6], pch=16, cex=0.5, main = "Reg-log-D13B2 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,7:8], pch=16, cex=0.5, main = "No transformation-Adult A")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,9:10], pch=16, cex=0.5, main = "No transformation-Adult B")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,7:8], pch=16, cex=0.5, main="Reg-log-Adult A", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,9:10], pch=16, cex=0.5, main="Reg-log-Adult B", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
sampleDists <- dist( t( assay(rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors,
annotation_col =colData[,c(1,3)]
)
# calculate correlation between pairs of samples for all possible pairs.
sampleCor <- cor(assay(rld))
# generate heatmap
pheatmap(
as.matrix(sampleCor),
annotation_col =as.data.frame(colData(rld)[,c(1,3)]),
main = "Correlation clustering",
width = 12,
height = 10
)
library(factoextra)
install.packages("factoextra")
library(factoextra)
library(ggfortify)
library(ggrepel)
library(factoextra)
library(ggfortify)
library(ggrepel)
pca <- prcomp(t(assay(rld)), center=TRUE, scale.=FALSE)
fviz_eig(pca)
plotPCA(rld, intgroup="condition") + geom_text_repel(aes(label = colData(rld)$precise))
plotPCA(rld, intgroup="batch") + geom_text_repel(aes(label = colData(rld)$precise))
vsd <- vst(dds, blind=FALSE)
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$batch)
assay(vsd) <- mat
plotPCA(vsd) + geom_text_repel(aes(label = colData(rld)$precise)) + ggtitle("Sample PCA, regularized-log-transformed normalized data")
sampleDists_vsd <- dist( t( assay(vsd) ) )
sampleDistMatrix <- as.matrix( sampleDists_vsd )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists_vsd,
clustering_distance_cols=sampleDists_vsd,
col=colors,
annotation_col =colData[,c(1,3)]
)
# calculate correlation between pairs of samples for all possible pairs.
sampleCor <- cor(assay(vsd))
# generate heatmap
pheatmap(
as.matrix(sampleCor),
annotation_col =as.data.frame(colData(vsd)[,c(1,3)]),
main = "Correlation clustering",
width = 12,
height = 10
)
count <- read.delim("Without batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
# Count matrix
countData <- count[,2:ncol(count)]
rownames(countData) <- count[,1]
colData <- data.frame(condition=c("Control", "Control", "Exp", "Exp"),
precise=c("CTRL1", "CTRL2", "Exp1", "Exp2"))
rownames(colData) <- colnames(countData)
colData
dds <- DESeqDataSetFromMatrix(countData, colData, design = ~ condition)
keep <- rowSums(counts(dds)) > 20
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
boxplot(log2(1 + counts(dds, normalized = FALSE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="Before normalization")
boxplot(log2(1 + counts(dds, normalized = TRUE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="After normalization")
rld <- rlog(dds)
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transformation-Control")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,3:4], pch=16, cex=0.5, main = "No transformation-Exp")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-Control", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,3:4], pch=16, cex=0.5, main="Reg-log-Exp", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
sampleDists <- dist( t( assay(rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors,
annotation_col =colData)
hs <- hclust(dist(t(assay(rld))))
plot(hs)
# calculate correlation between pairs of samples for all possible pairs.
sampleCor <- cor(assay(rld))
# generate heatmap
pheatmap(
as.matrix(sampleCor),
annotation_col =as.data.frame(colData(rld)[,c(1,2)]),
main = "Correlation clustering",
width = 12,
height = 10
)
sessionInfo()
library(DESeq2)
library(pheatmap)
library(RColorBrewer)
library(tidyverse)
library(ggrepel)
library(ggfortify)
count <- read.delim("Without batch effect/data/rawcount.csv", h=T, sep=",")
head(count)
# Count matrix
countData <- count[,2:ncol(count)]
rownames(countData) <- count[,1]
head(countData)
colData <- data.frame(condition=c("Control", "Control", "Exp", "Exp"),
precise=c("CTRL1", "CTRL2", "Exp1", "Exp2"))
colData
rownames(colData) <- colData$precise
colData <- data.frame(condition=c("Control", "Control", "Exp", "Exp"),
precise=c("CTRL1", "CTRL2", "Exp1", "Exp2"))
colData
rownames(colData) <- colData$precise
colData
dds <- DESeqDataSetFromMatrix(countData, colData, design = ~ condition)
keep <- rowSums(counts(dds)) > 20
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
sizeFactors
sizeFactors(dds)
boxplot(log2(1 + counts(dds, normalized = FALSE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="Before normalization")
boxplot(log2(1 + counts(dds, normalized = TRUE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="After normalization")
rld <- rlog(dds)
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log_control", xlim=c(0, 20), ylim=c(0, 20) )
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log_control", xlim=c(0, 20), ylim=c(0, 20) )
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,3:4], pch=16, cex=0.5, main="Reg-log_Experiment", xlim=c(0, 20), ylim=c(0, 20) )
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transformation-Control")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,3:4], pch=16, cex=0.5, main = "No transformation-Exp")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-Control", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,3:4], pch=16, cex=0.5, main="Reg-log-Exp", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transformation-Control")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,3:4], pch=16, cex=0.5, main = "No transformation-Exp")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-Control", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,3:4], pch=16, cex=0.5, main="Reg-log-Exp", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
dev.off()
log_c <- assay(rld)
t <- t(log_c)
distance <- dist(t)
hs <- hclust(distance)
plot(hs)
sampleDists <- distance
sampleDists <- dist( t( assay(rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
col = colors,
annotation_col = colData,
clustering_distance_rows = sampleDist,
clustering_distance_cols = sampleDist)
sampleDists <- dist( t( assay(rld) ) )
pheatmap(sampleDistMatrix,
col = colors,
annotation_col = colData,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists)
pheatmap(sampleDistMatrix,
col = colors,
annotation_col = colData,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists)
# calculate correlation between pairs of samples for all possible pairs.
sampleCor <- cor(assay(rld))
CorMat <- as.matrix(sampleCor)
pheatmap(CorMat,
annotation_col = colData,
width = 12,
height = 10)
View(countData)
rm(list=ls())
count <- read.delim("With batch effect/data/rawcount.csv", h=T, sep=",")
countData <- count[,2:ncol(count)]
rownames(countData) <- count[,1]
head(count)
names(colData)
names(countData)
colData <- data.frame( condition = c( rep("D13A", 3), rep("D13B", 3), rep("AdultA", 2), rep("AdultB", 2) ),
precise = precise=c("D13_A1", "D13_A2","D13_A3","D13_B1", "D13_B2","D13_B3","Adult_D1", "Adult_D2","Adult_B1","Adult_B2"),
colData <- data.frame( condition = c( rep("D13A", 3), rep("D13B", 3), rep("AdultA", 2), rep("AdultB", 2) ),
precise =c("D13_A1", "D13_A2","D13_A3","D13_B1", "D13_B2","D13_B3","Adult_D1", "Adult_D2","Adult_B1","Adult_B2"),
batch = c( "1", "1", "2", "1", "1", "2", rep("1", 4)))
rownames(colData) <- colData$precise
head(colData)
dds <- DESeqDataSetFromMatrix(countData, colData, design = ~ batch + condition)
keep <- rowSums(counts(dds)) > 20
dds <- dds[keep,]
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
boxplot(log2(1 + counts(dds, normalized = FALSE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="Before normalization")
boxplot(log2(1 + counts(dds, normalized = TRUE) ), las=3, cex.axis=0.8, ylab="log2(1+counts)", main="After normalization")
rld <- rlog(dds)
View(colData)
plot( assay(rld)[,7:8], pch=16, cex=0.5, main="Reg-log-Adult A", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,9:10], pch=16, cex=0.5, main="Reg-log-Adult B", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,2))
plot( counts(dds, normalized = TRUE)[,7:8], pch=16, cex=0.5, main = "No transformation-Adult A")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,9:10], pch=16, cex=0.5, main = "No transformation-Adult B")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,7:8], pch=16, cex=0.5, main="Reg-log-Adult A", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,9:10], pch=16, cex=0.5, main="Reg-log-Adult B", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,4:5], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,4:6], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,5:6], pch=16, cex=0.5, main = "No transf-D13B2 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:5], pch=16, cex=0.5, main="Reg-log-D13B1 vs D13B2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:6], pch=16, cex=0.5, main = "Reg-log-D13B1 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,5:6], pch=16, cex=0.5, main = "Reg-log-D13B2 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,4:5], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,4:6], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,5:6], pch=16, cex=0.5, main = "No transf-D13B2 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:5], pch=16, cex=0.5, main="Reg-log-D13B1 vs D13B2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:6], pch=16, cex=0.5, main = "Reg-log-D13B1 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,5:6], pch=16, cex=0.5, main = "Reg-log-D13B2 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,4:5], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,4:6], pch=16, cex=0.5, main = "No transf-D13B1 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,5:6], pch=16, cex=0.5, main = "No transf-D13B2 vs D13B3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:5], pch=16, cex=0.5, main="Reg-log-D13B1 vs D13B2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:6], pch=16, cex=0.5, main = "Reg-log-D13B1 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,5:6], pch=16, cex=0.5, main = "Reg-log-D13B2 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(2,3))
plot( counts(dds, normalized = TRUE)[,1:2], pch=16, cex=0.5, main = "No transf-D13A1 vs D13A2")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,1:3], pch=16, cex=0.5, main = "No transf-D13A1 vs D13A3")
abline(0, 1, lty=4, col="red")
plot( counts(dds, normalized = TRUE)[,2:3], pch=16, cex=0.5, main = "No transf-D13A2 vs D13A3")
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-D13A1 vs D13A2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:3], pch=16, cex=0.5, main = "Reg-log-D13A1 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,2:3], pch=16, cex=0.5, main = "Reg-log-D13A2 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(1,3))
plot( assay(rld)[,1:2], pch=16, cex=0.5, main="Reg-log-D13A1 vs D13A2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,1:3], pch=16, cex=0.5, main = "Reg-log-D13A1 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,2:3], pch=16, cex=0.5, main = "Reg-log-D13A2 vs D13A3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
par(mfrow=c(1,3))
plot( assay(rld)[,4:5], pch=16, cex=0.5, main="Reg-log-D13B1 vs D13B2", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,4:6], pch=16, cex=0.5, main = "Reg-log-D13B1 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
plot( assay(rld)[,5:6], pch=16, cex=0.5, main = "Reg-log-D13B2 vs D13B3", xlim=c(0,20), ylim=c(0,20))
abline(0, 1, lty=4, col="red")
log_c <- assay(rld)
t <- t(log_c)
distance <- dist(t)
hs <- hclust(distance)
plot(hs)
log_c <- assay(rld)
t <- t(log_c)
distance <- dist(t)
hs <- hclust(distance)
plot(hs)
sampleDists <- dist( t( assay(rld) ) )
sampleDistMatrix <- as.matrix( sampleDists )
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors,
annotation_col =colData[,c(1,3)]
)
library(factoextra)
library(ggfortify)
library(ggrepel)
pca <- prcomp(t(assay(rld)), center=TRUE, scale.=FALSE)
fviz_eig(pca)
plotPCA(rld, intgroup="batch")
plotPCA(rld, intgroup="batch") + geom_text_repel(aes(label = colData(rld)$precise))
plotPCA(rld, intgroup="condition") + geom_text_repel(aes(label = colData(rld)$precise))
vsd <- vst(dds, blind=FALSE)
mat <- assay(vsd)
mat <- limma::removeBatchEffect(mat, vsd$batch)
assay(vsd) <- mat
plotPCA(vsd) + geom_text_repel(aes(label = colData(rld)$precise)) + ggtitle("Sample PCA, regularized-log-transformed normalized data")
