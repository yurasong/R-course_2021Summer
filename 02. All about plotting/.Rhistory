data(airquality)
str(airquality)
str(airquality)
head(airquality)
stripchart(airquality$Ozone)
stripchart(airquality$Ozone,
main="Mean ozone in parts per billion at Roosevelt Island",
xlab="Parts Per Billion",
ylab="Ozone",
method="jitter",
col="orange",
pch=1
)
# prepare the data
temp <- airquality$Temp
# gererate normal distribution with same mean and sd
tempNorm <- rnorm(200,mean=mean(temp, na.rm=TRUE), sd = sd(temp, na.rm=TRUE))
# make a list
x <- list("temp"=temp, "norm"=tempNorm)
stripchart(x,
main="Multiple stripchart for comparision",
xlab="Degree Fahrenheit",
ylab="Temperature",
method="jitter",
col=c("orange","red"),
pch=16
)
stripchart(Temp~Month,
data=airquality,
main="Different strip chart for each month",
xlab="Months",
ylab="Temperature",
col="brown3",
group.names=c("May","June","July","August","September"),
vertical=TRUE,
pch=16
)
boxplot(airquality$Ozone)
boxplot(airquality$Ozone,
main = "Mean ozone in parts per billion at Roosevelt Island",
xlab = "Parts Per Billion",
ylab = "Ozone",
col = "orange",
border = "brown",
horizontal = TRUE,
notch = TRUE
)
b <- boxplot(airquality$Ozone)
b
b
# prepare the data
ozone <- airquality$Ozone
temp <- airquality$Temp
# gererate normal distribution with same mean and sd
ozone_norm <- rnorm(200,mean=mean(ozone, na.rm=TRUE), sd=sd(ozone, na.rm=TRUE))
temp_norm <- rnorm(200,mean=mean(temp, na.rm=TRUE), sd=sd(temp, na.rm=TRUE))
boxplot(ozone, ozone_norm, temp, temp_norm,
main = "Multiple boxplots for comparision",
at = c(1,2,4,5),
names = c("ozone", "normal", "temp", "normal"),
las = 2,
col = c("orange","red"),
border = "brown",
horizontal = TRUE,
notch = TRUE
)
boxplot(Temp~Month,
data=airquality,
main="Different boxplots for each month",
xlab="Month Number",
ylab="Degree Fahrenheit",
col="orange",
border="brown"
)
Temperature <- airquality$Temp
hist(Temperature)
# histogram with added parameters
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="darkmagenta",
freq=FALSE
)
h <- hist(Temperature)
h
h <- hist(Temperature,ylim=c(0,40))
text(h$mids,h$counts,labels=h$counts, adj=c(0.5, -0.5))
par(mfrow=c(1,2))
hist(Temperature, breaks=4, main="With breaks=4")
hist(Temperature, breaks=20, main="With breaks=20")
hist(Temperature,
main="Maximum daily temperature at La Guardia Airport",
xlab="Temperature in degrees Fahrenheit",
xlim=c(50,100),
col="chocolate",
border="brown",
breaks=c(55,60,70,75,80,100)
)
plot(airquality$Temp, airquality$Ozone)
plot(airquality$Temp, airquality$Ozone, col="red", pch =19, main="Relationship between Ozone reading and temperature")
?plot
plot(airquality$Temp, airquality$Ozone, col="red", pch =4, main="Relationship between Ozone reading and temperature")
pairs(airquality[,1:4])
slices <- c(10, 12,4, 16, 8)
lbls <- c("US", "UK", "Australia", "Germany", "France")
pie(slices, labels = lbls, main="Pie Chart of Countries")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
install.packages("plotrix")
library(plotrix)
pie3D(slices,labels=lbls,explode=0.1, main="Pie Chart of Countries ")
x <- rnorm(10,sd=5,mean=20)
y <- 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
x1 <- runif(8,15,25)
y1 <- 2.5*x1 - 1.0 + runif(8,-6,6)
points(x1,y1,col=2)
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend("leftup",c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
legend("topleft",c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
x2 <- runif(8,15,25)
y2 <- 2.5*x2 - 1.0 + runif(8,-6,6)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
points(x1,y1,col=2,pch=3)
points(x2,y2,col=4,pch=5)
legend("topleft",c("Original","one","two"),col=c(1,2,4),pch=c(1,3,5))
x <- rnorm(10,sd=5,mean=20)
y <- 2.5*x - 1.0 + rnorm(10,sd=9,mean=0)
cor(x,y)
xHigh <- x
yHigh <- y + abs(rnorm(10,sd=3.5))
xLow <- x
yLow <- y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
plot(x,y,xlab="Independent",ylab="Dependent",main="Random Stuff")
xHigh <- x
yHigh <- y + abs(rnorm(10,sd=3.5))
xLow <- x
yLow <- y - abs(rnorm(10,sd=3.1))
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
numberWhite <- rhyper(400,4,5,3)
numberChipped <- rhyper(400,2,7,3)
par(mfrow=c(2,3))
boxplot(numberWhite,main="first plot")
boxplot(numberChipped,main="second plot")
plot(jitter(numberWhite),jitter(numberChipped),xlab="Number White Marbles Drawn",
ylab="Number Chipped Marbles Drawn",main="Pulling Marbles With Jitter")
hist(numberWhite,main="fourth plot")
hist(numberChipped,main="fifth plot")
mosaicplot(table(numberWhite,numberChipped),main="sixth plot")
data <- read.delim("count_experssion.csv", h=T, sep=",")
head(data)
x <- data$X
y <- data$Y
data <- read.delim("count_experssion.csv", h=T, sep=",")
head(data)
data
x <- data$X
y <- data$Y
x <- data$X
y <- data$Y
plot(x,y,xlab="drug X",ylab="drug Y",main="Random Stuff")
xHigh <- x
yHigh <- y + std.error(y)
xLow <- x
yLow <- y - std.error(y)
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
plot(x,y,xlab="drug X",ylab="drug Y",main="Random Stuff", ylim=c(10, 55))
xHigh <- x
yHigh <- y + std.error(y)
xLow <- x
yLow <- y - std.error(y)
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
plot(x,y,xlab="drug X",ylab="drug Y",main="Random Stuff", ylim=c(15, 50))
xHigh <- x
yHigh <- y + std.error(y)
xLow <- x
yLow <- y - std.error(y)
arrows(xHigh,yHigh,xLow,yLow,col=2,angle=90,length=0.1,code=3)
drugx <- data$X
drugy <- data$Y
drugx <- data$X
drugy <- data$Y
par(mfrow=c(2,3))
boxplot(drugx,main="first plot")
boxplot(drugy,main="second plot")
plot(jitter(drugx),jitter(drugy),xlab="Number White Marbles Drawn",
ylab="Number Chipped Marbles Drawn",main="Pulling Marbles With Jitter")
hist(drugx,main="fourth plot")
hist(drugy,main="fifth plot")
mosaicplot(table(drugx,drugy),main="sixth plot")
smoothScatter(drugx,drugy,
xlab="Drug X",ylab="Drug Y",main="Drawing Marbles")
smoothScatter(drugx,drugy,
xlab="Drug X",ylab="Drug Y",main="Drawing Marbles",
ylim=c(15, 50))
smoothScatter(drugx,drugy,
xlab="Drug X",ylab="Drug Y",main="Drawing Marbles")
smoothScatter(drugx,drugy,
xlab="Drug X",ylab="Drug Y",main="Drawing Marbles")
grid(4,3)
uData <- rnorm(20)
vData <- rnorm(20,mean=5)
wData <- uData + 2*vData + rnorm(20,sd=0.5)
xData <- -2*uData+rnorm(20,sd=0.1)
yData <- 3*vData+rnorm(20,sd=2.5)
d <- data.frame(u=uData,v=vData,w=wData,x=xData,y=yData)
pairs(d)
count <- read.delim("gene_exp_cp20m.csv", h=T, sep=",")
head(count)
dim(count)
count <- unique(count)
dsample <- count[,3:ncol(count)]
rownames(dsample) <- count[,1]
head(dsample)
keep <- rowSums(dsample) > 40
dsample <- dsample[keep,]
dim(dsample)
hs <- hclust(dist(t(dsample)))
plot(hs)
varM <- apply(dsample, 1, var) #Calculating variances between samples
varM1 <- varM[order(varM, decreasing=TRUE)] # Order the calculated variances
varM1 <- varM1[1:500]
dM <- dsample[names(varM1),]
plot(hclust(dist(t(dM))))
library(RColorBrewer)
library(gplots)
library(ggplot2)
mypalette <- brewer.pal(11, "RdYlBu")
mycols <- colorRampPalette(mypalette)
varM <- apply(dsample, 1, var)
varM1 <- varM[order(varM, decreasing=TRUE)]
varM1 <- varM1[1:200]
dM <- dsample[names(varM1),]
heatmap.2(as.matrix(dM),
margins = c(7,10),
keysize = 0.8, #Indicating the size of color key
scale ="row", #ALWAYS KEEP THE ROW
cexRow = 0.5, cexCol = 0.7, #size of axis-label
dendrogram = "row",
Rowv = TRUE, Colv = FALSE, #TRUE = Dendrogram order,  #FALSE = Input order
col = rev(mycols(50)),  #Number of shades
trace = "none") #Data histrogram on heatmap
heatmap.2(as.matrix(dM),
margins = c(4,5),
keysize = 0.7, #Indicating the size of color key
scale ="row", #ALWAYS KEEP THE ROW
cexRow = 0.5, cexCol = 0.7, #size of axis-label
dendrogram = "row",
Rowv = TRUE, Colv = FALSE, #TRUE = Dendrogram order,  #FALSE = Input order
col = rev(mycols(50)),  #Number of shades
trace = "none") #Data histrogram on heatmap
library(ggplot2)
library(ggfortify)
library(cluster)
library(RColorBrewer)
pca_tdf <- prcomp(t(dsample), scale.=FALSE)
autoplot(pca_tdf)
autoplot(pca_tdf, label = TRUE, label.size = 3)
autoplot(pca_tdf, label = TRUE, label.size = 3, shape=FALSE)
autoplot(kmeans(pca_tdf$x, 2), data=pca_tdf,label = TRUE, label.size = 4, shape=FALSE)
autoplot(kmeans(pca_tdf$x, 3), data=pca_tdf,label = TRUE, label.size = 4, shape=FALSE)
sessionInfo()
